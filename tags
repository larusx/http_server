!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$	./server	/^/;"	v
Computed	./sha1.h	/^	int Computed;               \/* Is the digest computed?         *\/$/;"	m	struct:SHA1Context	access:public
Corrupted	./sha1.h	/^	int Corrupted;             \/* Is the message digest corrupted? *\/$/;"	m	struct:SHA1Context	access:public
GMT_time	./time_conv.c	/^time_t GMT_time(char* GMT)$/;"	f	signature:(char* GMT)
GMT_time	./time_conv.h	/^time_t GMT_time(char* GMT);$/;"	p	signature:(char* GMT)
I	./server	/^/;"	v
Intermediate_Hash	./sha1.h	/^    uint32_t Intermediate_Hash[SHA1HashSize\/4]; \/* Message Digest  *\/$/;"	m	struct:SHA1Context	access:public
LIST_LEN	./list.c	13;"	d	file:
Length_High	./sha1.h	/^    uint32_t Length_High;           \/* Message length in bits      *\/$/;"	m	struct:SHA1Context	access:public
Length_Low	./sha1.h	/^    uint32_t Length_Low;            \/* Message length in bits      *\/$/;"	m	struct:SHA1Context	access:public
M	./server.o	/^äuÉ))u,$óY¼,»Z%»’¼%×#99¼5/;"	v
Message_Block	./sha1.h	/^	uint8_t Message_Block[64];      \/* 512-bit message blocks      *\/$/;"	m	struct:SHA1Context	access:public
Message_Block_Index	./sha1.h	/^	int_least16_t Message_Block_Index;$/;"	m	struct:SHA1Context	access:public
NTHREAD	./server.c	20;"	d	file:
PAGE_MAX_LEN	./server.c	19;"	d	file:
PRINT	./list.c	8;"	d	file:
RECV_SIZE	./server.c	17;"	d	file:
SEND_SIZE	./server.c	18;"	d	file:
SHA1CircularShift	./sha1.c	36;"	d	file:
SHA1Context	./sha1.h	/^typedef struct SHA1Context$/;"	s
SHA1Context	./sha1.h	/^} SHA1Context;$/;"	t	typeref:struct:SHA1Context
SHA1Context::Computed	./sha1.h	/^	int Computed;               \/* Is the digest computed?         *\/$/;"	m	struct:SHA1Context	access:public
SHA1Context::Corrupted	./sha1.h	/^	int Corrupted;             \/* Is the message digest corrupted? *\/$/;"	m	struct:SHA1Context	access:public
SHA1Context::Intermediate_Hash	./sha1.h	/^    uint32_t Intermediate_Hash[SHA1HashSize\/4]; \/* Message Digest  *\/$/;"	m	struct:SHA1Context	access:public
SHA1Context::Length_High	./sha1.h	/^    uint32_t Length_High;           \/* Message length in bits      *\/$/;"	m	struct:SHA1Context	access:public
SHA1Context::Length_Low	./sha1.h	/^    uint32_t Length_Low;            \/* Message length in bits      *\/$/;"	m	struct:SHA1Context	access:public
SHA1Context::Message_Block	./sha1.h	/^	uint8_t Message_Block[64];      \/* 512-bit message blocks      *\/$/;"	m	struct:SHA1Context	access:public
SHA1Context::Message_Block_Index	./sha1.h	/^	int_least16_t Message_Block_Index;$/;"	m	struct:SHA1Context	access:public
SHA1HashSize	./sha1.h	40;"	d
SHA1Input	./sha1.c	/^int SHA1Input(    SHA1Context    *context,$/;"	f	signature:( SHA1Context *context, const uint8_t *message_array, unsigned length)
SHA1Input	./sha1.h	/^int SHA1Input(  SHA1Context *,const uint8_t *,unsigned int);$/;"	p	signature:( SHA1Context *,const uint8_t *,unsigned int)
SHA1PadMessage	./sha1.c	/^void SHA1PadMessage(SHA1Context *);$/;"	p	file:	signature:(SHA1Context *)
SHA1PadMessage	./sha1.c	/^void SHA1PadMessage(SHA1Context *context)$/;"	f	signature:(SHA1Context *context)
SHA1ProcessMessageBlock	./sha1.c	/^void SHA1ProcessMessageBlock(SHA1Context *);$/;"	p	file:	signature:(SHA1Context *)
SHA1ProcessMessageBlock	./sha1.c	/^void SHA1ProcessMessageBlock(SHA1Context *context)$/;"	f	signature:(SHA1Context *context)
SHA1Reset	./sha1.c	/^int SHA1Reset(SHA1Context *context)$/;"	f	signature:(SHA1Context *context)
SHA1Reset	./sha1.h	/^int SHA1Reset(  SHA1Context *);$/;"	p	signature:( SHA1Context *)
SHA1Result	./sha1.c	/^int SHA1Result( SHA1Context *context,$/;"	f	signature:( SHA1Context *context, uint8_t Message_Digest[SHA1HashSize])
SHA1Result	./sha1.h	/^int SHA1Result( SHA1Context *,$/;"	p	signature:( SHA1Context *, uint8_t Message_Digest[SHA1HashSize])
Y	./server.o	/^äuÉ))u,$óY¼,»Z%»’¼%×#99¼5/;"	v
_LIST_H	./list.h	2;"	d
_SHA1_H_	./sha1.h	17;"	d
_SHA_enum_	./sha1.h	31;"	d
__TIME_CONV_H	./time_conv.h	2;"	d
accepted_func	./server.c	/^void* accepted_func(void* arg)$/;"	f	signature:(void* arg)
base	./base64.c	/^const char base[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/="; $/;"	v
base64_encode	./base64.c	/^char *base64_encode(const char* data, int data_len) $/;"	f	signature:(const char* data, int data_len)
base64_encode	./sha1_base64_key.c	/^extern char *base64_encode(const char* data, int data_len);$/;"	p	file:	signature:(const char* data, int data_len)
c_sockfd	./server.c	/^int c_sockfd;$/;"	v
code_200	./server.c	/^char* code_200="HTTP\/1.1 200 OK\\r\\nServer: LarusX\\r\\nConnection:keep-alive\\r\\n\\r\\n";$/;"	v
cond	./server.c	/^pthread_cond_t cond=PTHREAD_COND_INITIALIZER;$/;"	v
day	./time_conv.c	/^static char* day[]={"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};$/;"	v	file:
deflate	./log	/^Accept-Encoding: gzip,deflate,sdch$/;"	v
find_number	./time_conv.c	/^static int find_number(char* str,int day_or_month)$/;"	f	file:	signature:(char* str,int day_or_month)
function	./a.html	/^$(document).ready(function(){$/;"	f	signature:()
list_clear	./list.c	/^void list_clear(socket_list* head)$/;"	f	signature:(socket_list* head)
list_clear	./list.h	/^void list_clear(socket_list* head);$/;"	p	signature:(socket_list* head)
list_create	./list.c	/^socket_list* list_create()$/;"	f	signature:()
list_create	./list.h	/^socket_list* list_create(void);$/;"	p	signature:(void)
list_get_task	./list.c	/^int list_get_task(socket_list* head)$/;"	f	signature:(socket_list* head)
list_get_task	./list.h	/^int list_get_task(socket_list* head);$/;"	p	signature:(socket_list* head)
list_head	./list.h	/^void* list_head;$/;"	v
list_insert	./list.c	/^void list_insert(socket_list* head,int fd)$/;"	f	signature:(socket_list* head,int fd)
list_insert	./list.h	/^void list_insert(socket_list* head,int fd);$/;"	p	signature:(socket_list* head,int fd)
list_remove	./list.c	/^void list_remove(socket_list* head,int fd)$/;"	f	signature:(socket_list* head,int fd)
list_remove	./list.h	/^void list_remove(socket_list* head,int fd);$/;"	p	signature:(socket_list* head,int fd)
list_send	./list.c	/^void list_send(socket_list* head,char* buf,int length)$/;"	f	signature:(socket_list* head,char* buf,int length)
list_send	./list.h	/^void list_send(socket_list* head,char* buf,int length);$/;"	p	signature:(socket_list* head,char* buf,int length)
list_tail	./list.h	/^socket_list* list_tail;$/;"	v
log_fd	./server.c	/^int log_fd;$/;"	v
main	./server.c	/^int main()$/;"	f	signature:()
month	./time_conv.c	/^static char* month[]={"Jan","Feb","Mar","Apr","May","June","July","Aug","Sep","Oct","Nov","Dec"};$/;"	v	file:
mutex	./server.c	/^	pthread_mutex_t mutex;$/;"	m	struct:websocket	file:	access:public
mutex	./server.c	/^pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;$/;"	v
p_socket_list	./server.c	/^	socket_list* p_socket_list;$/;"	m	struct:websocket	file:	access:public
page_select	./server.c	/^void page_select(const char* page_name,int* page_len,char* buf)$/;"	f	signature:(const char* page_name,int* page_len,char* buf)
parse_http_head	./server.c	/^void parse_http_head(const char* head,char* filename)$/;"	f	signature:(const char* head,char* filename)
pnext	./list.h	/^	struct socket_list* pnext;$/;"	m	struct:socket_list	typeref:struct:socket_list::socket_list	access:public
print_binary	./server.c	/^void print_binary(unsigned char from)$/;"	f	signature:(unsigned char from)
sha1_base64_key	./server.c	/^extern char* sha1_base64_key(char *str,int str_len);$/;"	p	file:	signature:(char *str,int str_len)
sha1_base64_key	./sha1_base64_key.c	/^char* sha1_base64_key(char *str,int str_len)$/;"	f	signature:(char *str,int str_len)
shaInputTooLong	./sha1.h	/^    shaInputTooLong,    \/* input data too long *\/$/;"	e	enum:__anon1
shaNull	./sha1.h	/^    shaNull,            \/* Null pointer parameter *\/$/;"	e	enum:__anon1
shaStateError	./sha1.h	/^    shaStateError       \/* called Input after Result *\/$/;"	e	enum:__anon1
shaSuccess	./sha1.h	/^    shaSuccess = 0,$/;"	e	enum:__anon1
sock_fd	./list.h	/^	int sock_fd;$/;"	m	struct:socket_list	access:public
socket	./a.html	/^var socket=new WebSocket('ws:\/\/192.168.0.38:80');$/;"	v
socket_list	./list.h	/^typedef struct socket_list{$/;"	s
socket_list	./list.h	/^}socket_list;$/;"	t	typeref:struct:socket_list
socket_list::pnext	./list.h	/^	struct socket_list* pnext;$/;"	m	struct:socket_list	typeref:struct:socket_list::socket_list	access:public
socket_list::sock_fd	./list.h	/^	int sock_fd;$/;"	m	struct:socket_list	access:public
task_cond	./server.c	/^pthread_cond_t task_cond=PTHREAD_COND_INITIALIZER;$/;"	v
task_mutex	./server.c	/^pthread_mutex_t task_mutex=PTHREAD_MUTEX_INITIALIZER;$/;"	v
task_queue_head	./server.c	/^socket_list* task_queue_head;$/;"	v
time_GMT	./time_conv.c	/^void time_GMT(time_t time,char* GMT)$/;"	f	signature:(time_t time,char* GMT)
time_GMT	./time_conv.h	/^void time_GMT(time_t time,char* GMT);$/;"	p	signature:(time_t time,char* GMT)
times	./a.html	/^<button type="button" class="close" data-dismiss="alert">&times;<\/button>$/;"	v
web_fd	./server.c	/^int web_fd;$/;"	v
websocket	./server.c	/^typedef struct websocket{$/;"	s	file:
websocket	./server.c	/^}websocket;$/;"	t	typeref:struct:websocket	file:
websocket::mutex	./server.c	/^	pthread_mutex_t mutex;$/;"	m	struct:websocket	file:	access:public
websocket::p_socket_list	./server.c	/^	socket_list* p_socket_list;$/;"	m	struct:websocket	file:	access:public
websocket_fds	./server.c	/^websocket websocket_fds={NULL,PTHREAD_MUTEX_INITIALIZER};$/;"	v
xml	./log	/^Accept: text\/html,application\/xhtml+xml,application\/xml;q=0.9,*\/*;q=0.8$/;"	v
zh	./log	/^Accept-Language: zh-CN,zh;q=0.8$/;"	v
